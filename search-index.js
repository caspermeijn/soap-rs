var searchIndex = JSON.parse('{\
"soap":{"doc":"","t":[0,0,0,3,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,13,3,13,13,3,13,13,13,13,13,4,4,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,12,11,12,11,11,11,12,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["addressing","envelope","helper","Addressing","AddressingBuilder","action","action","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","from","from","from","into","into","message_id","message_id","ne","ne","new","to","to","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","DocumentStartAlreadyEmitted","EmitterConfig","EndElementNameIsNotEqualToLastStartElementName","EndElementNameIsNotSpecified","Envelope","InvalidEnvelopeName","Io","LastElementNameNotAvailable","MalformedXml","MissingBody","ParseError","WriteError","autopad_comments","autopad_comments","body","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","cdata_to_characters","cdata_to_characters","clone","clone_into","create_writer","default","description","description","empty","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","header","indent_string","indent_string","into","into","into","into","keep_element_names_stack","keep_element_names_stack","line_separator","line_separator","ne","new","normalize_empty_elements","normalize_empty_elements","pad_self_closing","pad_self_closing","parse","perform_escaping","perform_indent","perform_indent","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write_document_declaration","write_document_declaration","write_with_config","element_builder","string_buffer","ElementBuilder","attr","borrow","borrow_mut","child","from","into","new","ns","text","try_from","try_into","type_id","StringBuffer","borrow","borrow_mut","clone","clone_into","default","eq","flush","fmt","from","into","ne","new","to_owned","to_string","try_from","try_into","type_id","write"],"q":["soap","","","soap::addressing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","soap::envelope","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","soap::helper","","soap::helper::element_builder","","","","","","","","","","","","","soap::helper::string_buffer","","","","","","","","","","","","","","","","","",""],"d":["","","","Implementation of WS-Addressing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Document declaration has already been written to the …","Emitter configuration structure.","The name of the last opening element is not equal to the …","End element name is not specified when it is needed, for …","Container for an SOAP Envelope","Root tag of the parsed data is not <code>Envelope</code>","An I/O error occured in the underlying <code>Write</code> instance.","The name of the last opening element is not available.","The XML is invalid","No <code>Body</code> child was found in the <code>Envelope</code>","Errors that can occur parsing XML","An error which may be returned by <code>XmlWriter</code> when writing …","Sets the field to the provided value and returns updated …","Whether or not to automatically insert leading and …","","","","","","","","","","","Sets the field to the provided value and returns updated …","Whether or not to emit CDATA events as plain characters. …","","","Creates an XML writer with this configuration.","","","","Create an empty Envelope","","","","","","","","","","","","","Sets the field to the provided value and returns updated …","A string which will be used for a single level of …","","","","","Sets the field to the provided value and returns updated …","Whether or not to keep element names to support <code>EndElement</code>…","Sets the field to the provided value and returns updated …","Line separator used to separate lines in formatted …","","Creates an emitter configuration with default values.","Sets the field to the provided value and returns updated …","Whether or not to convert elements with empty content to …","Sets the field to the provided value and returns updated …","Whether or not to automatically insert spaces before the …","Parses xml data into an Envelope","Whether or not characters in output events will be …","Sets the field to the provided value and returns updated …","Whether or not the emitted document should be indented. …","","","","","","","","","","","","","","","","Writes out this Envelope as the root element in an new …","Sets the field to the provided value and returns updated …","Whether or not to write XML document declaration at the …","Writes out this Envelope as the root element in a new XML …","","","A builder for Element","Sets an attribute value of this element to the given …","","","Adds another Element as a child of this Element","","","","Adds a namespace to the current namespace context.","Adds a XMLNode::Text as a child of the Element","","","","Buffer from writing bytes to. The buffer can then be …","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,1,2,2,1,1,1,2,2,1,2,1,2,1,2,1,2,3,0,3,3,0,4,3,3,4,4,0,0,5,5,6,6,4,3,5,6,4,3,5,4,5,5,5,5,5,5,4,3,6,5,4,4,3,3,5,6,4,3,3,5,6,5,5,6,4,3,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,4,3,6,4,3,5,6,4,3,5,6,4,3,5,6,5,5,6,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],"f":[null,null,null,null,null,[[]],null,[[]],[[]],[[]],[[]],[[],["addressing",3]],[[],["addressingbuilder",3]],[[]],[[]],[[],["addressing",3]],[[],["addressingbuilder",3]],[[["addressing",3]],["bool",15]],[[["addressingbuilder",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["addressingbuilder",3]],["addressing",3]],[[]],[[]],[[]],[[]],[[]],null,[[["addressing",3]],["bool",15]],[[["addressingbuilder",3]],["bool",15]],[[]],[[]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["envelope",3]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15]],["emitterconfig",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["error"]],["error",8]]],[[["bool",15]],["emitterconfig",3]],null,[[],["emitterconfig",3]],[[]],[[],["eventwriter",3]],[[],["emitterconfig",3]],[[],["str",15]],[[],["str",15]],[[]],[[["emitterconfig",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[["error",3]],["emittererror",4]],[[]],[[]],null,[[],["emitterconfig",3]],null,[[]],[[]],[[]],[[]],[[["bool",15]],["emitterconfig",3]],null,[[],["emitterconfig",3]],null,[[["emitterconfig",3]],["bool",15]],[[],["emitterconfig",3]],[[["bool",15]],["emitterconfig",3]],null,[[["bool",15]],["emitterconfig",3]],null,[[["read",8]],[["envelope",3],["parseerror",4],["result",4,["envelope","parseerror"]]]],null,[[["bool",15]],["emitterconfig",3]],null,[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["write",8]],[["result",4,["writeerror"]],["writeerror",4]]],[[["bool",15]],["emitterconfig",3]],null,[[["write",8],["emitterconfig",3]],[["result",4,["writeerror"]],["writeerror",4]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["stringbuffer",3]],[[]],[[],["stringbuffer",3]],[[["stringbuffer",3]],["bool",15]],[[],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["stringbuffer",3]],["bool",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["usize",15],["result",6,["usize"]]]]],"p":[[3,"AddressingBuilder"],[3,"Addressing"],[4,"WriteError"],[4,"ParseError"],[3,"EmitterConfig"],[3,"Envelope"],[3,"ElementBuilder"],[3,"StringBuffer"]]},\
"xml":{"doc":"This crate currently provides an almost XML …","t":[3,3,0,12,12,12,12,0,0,12,12,12,12,12,12,12,0,0,0,12,12,12,12,0,12,12,12,12,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,3,13,13,4,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,10,11,12,11,11,11,11,11,11,11,11,11,11,5,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,17,17,17,17,17,17,3,6,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,3,4,3,3,13,3,13,6,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,3,13,13,4,3,13,13,6,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,11,11,11,11,12,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,13,13,3,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12],"n":["EmitterConfig","ParserConfig","attribute","autopad_comments","cdata_to_characters","cdata_to_characters","coalesce_characters","common","escape","extra_entities","ignore_comments","ignore_end_of_stream","ignore_root_level_whitespace","indent_string","keep_element_names_stack","line_separator","macros","name","namespace","normalize_empty_elements","pad_self_closing","perform_escaping","perform_indent","reader","replace_unknown_entity_references","trim_whitespace","whitespace_to_characters","write_document_declaration","writer","Attribute","OwnedAttribute","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","hash","hash","into","into","name","name","ne","ne","new","new","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","value","Position","TextPosition","Version10","Version11","XmlVersion","advance","advance_to_tab","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","column","eq","eq","fmt","fmt","fmt","fmt","from","from","into","into","is_name_char","is_name_start_char","is_whitespace_char","is_whitespace_str","ne","new","new_line","position","position","row","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","escape_str_attribute","escape_str_pcdata","Name","OwnedName","ReprDisplay","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","hash","hash","into","into","into","local","local","local_name","local_name","namespace","namespace","namespace_ref","ne","ne","prefix","prefix","prefix_ref","prefix_repr","prefixed","qualified","qualified","repr_display","to_owned","to_owned","to_owned","to_repr","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","CheckedTarget","NS_EMPTY_URI","NS_NO_PREFIX","NS_XMLNS_PREFIX","NS_XMLNS_URI","NS_XML_PREFIX","NS_XML_URI","Namespace","NamespaceMappings","NamespaceStack","NamespaceStackMappings","UriMapping","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_target","clone","clone","clone_into","clone_into","contains","default","empty","empty","eq","eq","extend","extend","extend","fmt","fmt","force_put","from","from","from","from","get","get","into","into","into","into","into_iter","is_empty","is_essentially_empty","iter","ne","ne","next","peek","peek_mut","pop","push_empty","put","put","put_checked","squash","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_pop","type_id","type_id","type_id","type_id","CData","Characters","Comment","EndDocument","EndElement","Error","ErrorKind","EventReader","Events","Io","ParserConfig","ProcessingInstruction","Result","StartDocument","StartElement","Syntax","UnexpectedEof","Utf8","Whitespace","XmlEvent","add_entity","as_writer_event","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cdata_to_characters","cdata_to_characters","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","coalesce_characters","coalesce_characters","create_reader","default","description","eq","eq","eq","eq","extra_entities","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","ignore_comments","ignore_comments","ignore_end_of_stream","ignore_end_of_stream","ignore_root_level_whitespace","ignore_root_level_whitespace","into","into","into","into","into","into","into_inner","into_inner","into_iter","into_iter","kind","msg","ne","ne","ne","new","new","new_with_config","next","next","position","position","replace_unknown_entity_references","replace_unknown_entity_references","source","source","source_mut","source_mut","to_owned","to_owned","to_owned","to_owned","to_string","trim_whitespace","trim_whitespace","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","whitespace_to_characters","whitespace_to_characters","attributes","data","encoding","name","name","name","namespace","standalone","version","DocumentStartAlreadyEmitted","EmitterConfig","EndElementNameIsNotEqualToLastStartElementName","EndElementNameIsNotSpecified","Error","EventWriter","Io","LastElementNameNotAvailable","Result","autopad_comments","autopad_comments","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cdata_to_characters","cdata_to_characters","clone","clone_into","create_writer","default","description","eq","events","fmt","fmt","fmt","from","from","from","from","indent_string","indent_string","inner_mut","into","into","into","into_inner","keep_element_names_stack","keep_element_names_stack","line_separator","line_separator","ne","new","new","new_with_config","normalize_empty_elements","normalize_empty_elements","pad_self_closing","pad_self_closing","perform_escaping","perform_indent","perform_indent","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_document_declaration","write_document_declaration","CData","Characters","Comment","EndElement","EndElementBuilder","ProcessingInstruction","StartDocument","StartElement","StartElementBuilder","XmlEvent","attr","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cdata","characters","comment","default_ns","end_element","fmt","from","from","from","from","from","from","into","into","into","name","ns","processing_instruction","start_element","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","attributes","data","encoding","name","name","name","namespace","standalone","version"],"q":["xml","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::attribute","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::escape","","xml::name","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::namespace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::reader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::reader::XmlEvent","","","","","","","","","xml::writer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::writer::events","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xml::writer::events::XmlEvent","","","","","","","",""],"d":["Emitter configuration structure.","Parser configuration structure.","Contains XML attributes manipulation types and functions.","Whether or not to automatically insert leading and …","Whether or not should CDATA be converted to characters. …","Whether or not to emit CDATA events as plain characters. …","Whether or not should sequential <code>Characters</code> events be …","Contains common types and functions used throughout the …","Contains functions for performing XML special characters …","A map of extra entities recognized by the parser. Default …","Whether or not should comments be omitted. Default is …","Whether or not the parser should ignore the end of …","Whether or not whitespace at the root level of the …","A string which will be used for a single level of …","Whether or not to keep element names to support <code>EndElement</code>…","Line separator used to separate lines in formatted …","Contains several macros used in this crate.","Contains XML qualified names manipulation types and …","Contains namespace manipulation types and functions.","Whether or not to convert elements with empty content to …","Whether or not to automatically insert spaces before the …","Whether or not characters in output events will be …","Whether or not the emitted document should be indented. …","Contains high-level interface for a pull-based XML parser.","Whether or not non-unicode entity references get replaced …","Whether or not should whitespace in textual events be …","Whether or not should whitespace be converted to …","Whether or not to write XML document declaration at the …","Contains high-level interface for an events-based XML …","A borrowed version of an XML attribute.","An owned version of an XML attribute.","","Returns a borrowed <code>Attribute</code> out of this owned one.","","","","","","","","","","","","","","","","","","","","Attribute name.","Attribute name.","","","Creates a borrowed attribute using the provided borrowed …","Creates a new owned attribute using the provided owned …","","Creates an owned attribute out of this borrowed one.","","","","","","","","","","Attribute value.","Attribute value.","Get the position in the document corresponding to the …","Represents a position inside some textual document.","XML version 1.0.","XML version 1.1.","XML version enumeration.","Advances the position in a line","Advances the position in a line to the next tab position","","","","","","","","","Column, counting from 0","","","","","","","","","","","Checks whether the given character is a name character (…","Checks whether the given character is a name start …","Checks whether the given character is a white space …","Checks whether the given string is compound only by white …","","Creates a new position initialized to the beginning of …","Advances the position to the beginning of the next line","Returns the current position or a position corresponding …","","Row, counting from 0","","","","","","","","","","","Performs escaping of common XML characters inside an …","Performs escaping of common XML characters inside PCDATA.","Represents a qualified XML name.","An owned variant of <code>Name</code>.","A wrapper around <code>Name</code> whose <code>Display</code> implementation prints …","","","","Constructs a borrowed <code>Name</code> based on this owned name.","","","","","","","","","","","","","","","","","","","","","Parses the given string slice into a qualified name.","","","","","","Returns a new <code>Name</code> instance representing plain local name.","Returns a new <code>OwnedName</code> instance representing a plain …","A local name, e.g. <code>string</code> in <code>xsi:string</code>.","A local name, e.g. <code>string</code> in <code>xsi:string</code>.","A namespace URI, e.g. <code>http://www.w3.org/2000/xmlns/</code>.","A namespace URI, e.g. <code>http://www.w3.org/2000/xmlns/</code>.","Returns an optional namespace by reference, equivalen to …","","","A name prefix, e.g. <code>xsi</code> in <code>xsi:string</code>.","A name prefix, e.g. <code>xsi</code> in <code>xsi:string</code>.","Returns an optional prefix by reference, equivalent to …","Returns either a prefix of this name or …","Returns a new <code>Name</code> instance with the given local name and …","Returns a new <code>Name</code> instance representing a qualified name …","Returns a new <code>OwnedName</code> instance representing a qualified …","Returns a structure which can be displayed with <code>std::fmt</code> …","Returns an owned variant of the qualified name.","","","Returns a correct XML representation of this local name …","","","","","","","","","","","","","","","A wrapper around <code>NamespaceStack</code> which implements <code>Extend</code> …","Designates an empty namespace URI, which is equivalent to …","Designates the absence of prefix in a qualified name.","Designates prefix for namespace definitions.","Designates the standard URI for <code>xmlns</code> prefix.","Designates prefix for a namespace containing several …","Designates the standard URI for <code>xml</code> prefix.","Namespace is a map from prefixes to namespace URIs.","An alias for iterator type for namespace mappings …","Namespace stack is a sequence of namespaces.","An iterator over mappings from prefixes to URIs in a …","A type alias for a pair of <code>(prefix, uri)</code> values returned …","","","","","","","","","Returns an object which implements <code>Extend</code> using …","","","","","Checks whether this namespace mapping contains the given …","Returns a namespace stack with default items in it.","Returns an empty namespace.","Returns an empty namespace stack.","","","","","","","","Puts a mapping into this namespace forcefully.","","","","","Queries the namespace for the given prefix.","Performs a search for the given prefix in the whole stack.","","","","","","Checks whether this namespace is empty.","Checks whether this namespace is essentially empty, that …","Returns an iterator over all mappings in this namespace …","","","","Borrows the topmost namespace immutably, leaving the …","Borrows the topmost namespace mutably, leaving the stack …","Removes the topmost namespace in this stack.","Adds an empty namespace to the top of this stack.","Puts a mapping into this namespace.","Puts a mapping into the topmost namespace in this stack.","Puts a mapping into the topmost namespace if this stack …","Combines this stack of namespaces into a single namespace.","","","","","","","","","","","Removes the topmost namespace in this stack.","","","","","Denotes CDATA content.","Denotes character data outside of tags.","Denotes a comment.","Denotes to the end of the document stream.","Denotes an end of an XML element.","An XML parsing error.","","A wrapper around an <code>std::io::Read</code> instance which provides …","An iterator over XML events created from some type …","","Parser configuration structure.","Denotes an XML processing instruction.","A result type yielded by <code>XmlReader</code>.","Corresponds to XML document declaration.","Denotes a beginning of an XML element.","","","","Denotes a chunk of whitespace outside of tags.","An element of an XML input stream.","Adds a new entity mapping and returns an updated config …","Obtains a writer event from this reader event.","","","","","","","","","","","","","Sets the field to the provided value and returns updated …","Whether or not should CDATA be converted to characters. …","","","","","","","","","Sets the field to the provided value and returns updated …","Whether or not should sequential <code>Characters</code> events be …","Creates an XML reader with this configuration.","","","","","","","A map of extra entities recognized by the parser. Default …","","","","","","","","","","","","","","A convenience method to create an <code>XmlReader</code> from a string …","Sets the field to the provided value and returns updated …","Whether or not should comments be omitted. Default is …","Sets the field to the provided value and returns updated …","Whether or not the parser should ignore the end of …","Sets the field to the provided value and returns updated …","Whether or not whitespace at the root level of the …","","","","","","","Unwraps this <code>EventReader</code>, returning the underlying reader.","Unwraps the iterator, returning the internal <code>EventReader</code>.","","","","Returns a reference to a message which is contained …","","","","Creates a new reader, consuming the given stream.","Returns a new config with default values.","Creates a new reader with the provded configuration, …","Pulls and returns next XML event from the stream.","","Returns the position of the last event produced by the …","","Sets the field to the provided value and returns updated …","Whether or not non-unicode entity references get replaced …","","","","","","","","","","Sets the field to the provided value and returns updated …","Whether or not should whitespace in textual events be …","","","","","","","","","","","","","","","","","","","Sets the field to the provided value and returns updated …","Whether or not should whitespace be converted to …","A list of attributes associated with the element.","Processing instruction content.","XML document encoding.","Processing instruction target.","Qualified name of the element.","Qualified name of the element.","Contents of the namespace mapping at this point of the …","XML standalone declaration.","XML version.","Document declaration has already been written to the …","Emitter configuration structure.","The name of the last opening element is not equal to the …","End element name is not specified when it is needed, for …","An error which may be returned by <code>XmlWriter</code> when writing …","A wrapper around an <code>std::io::Write</code> instance which emits …","An I/O error occured in the underlying <code>Write</code> instance.","The name of the last opening element is not available.","A result type yielded by <code>XmlWriter</code>.","Sets the field to the provided value and returns updated …","Whether or not to automatically insert leading and …","","","","","","","Sets the field to the provided value and returns updated …","Whether or not to emit CDATA events as plain characters. …","","","Creates an XML writer with this configuration.","","","","Contains <code>XmlEvent</code> datatype, instances of which are …","","","","","","","","Sets the field to the provided value and returns updated …","A string which will be used for a single level of …","Returns a mutable reference to the underlying <code>Writer</code>.","","","","Unwraps this <code>EventWriter</code>, returning the underlying writer.","Sets the field to the provided value and returns updated …","Whether or not to keep element names to support <code>EndElement</code>…","Sets the field to the provided value and returns updated …","Line separator used to separate lines in formatted …","","Creates a new <code>EventWriter</code> out of an <code>std::io::Write</code> …","Creates an emitter configuration with default values.","Creates a new <code>EventWriter</code> out of an <code>std::io::Write</code> …","Sets the field to the provided value and returns updated …","Whether or not to convert elements with empty content to …","Sets the field to the provided value and returns updated …","Whether or not to automatically insert spaces before the …","Whether or not characters in output events will be …","Sets the field to the provided value and returns updated …","Whether or not the emitted document should be indented. …","","","","","","","","","","","","Writes the next piece of XML document according to the …","Sets the field to the provided value and returns updated …","Whether or not to write XML document declaration at the …","Denotes CDATA content.","Denotes character data outside of tags.","Denotes a comment.","Denotes an end of an XML element.","","Denotes an XML processing instruction.","Corresponds to XML document declaration.","Denotes a beginning of an XML element.","A builder for a starting element event.","A part of an XML output stream.","Sets an attribute value of this element to the given …","","","","","","","Returns a CDATA event.","Returns a regular characters (PCDATA) event.","Returns a comment event.","Adds a default namespace mapping to the current namespace …","Returns a builder for an closing element.","","","","","","","","","","","Sets the name of this closing element.","Adds a namespace to the current namespace context.","Returns an writer event for a processing instruction.","Returns a builder for a starting element.","","","","","","","","","","A list of attributes associated with the element.","Processing instruction content.","XML document encoding.","Processing instruction target.","Qualified name of the element.","Optional qualified name of the element.","Contents of the namespace mapping at this point of the …","XML standalone declaration.","XML version."],"i":[0,0,0,1,2,1,2,0,0,2,2,2,2,1,1,1,0,0,0,1,1,1,1,0,2,2,2,1,0,0,0,3,4,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,5,5,0,6,6,6,5,6,5,6,5,6,5,6,6,5,6,6,5,5,6,5,6,5,0,0,0,0,6,6,6,7,6,6,6,5,6,5,6,5,6,5,6,5,0,0,0,0,0,8,9,10,10,8,9,10,9,10,9,10,9,10,8,9,9,10,10,8,9,9,9,10,10,10,9,10,8,9,10,9,10,9,10,9,10,10,9,10,9,10,10,9,9,9,10,9,9,9,10,9,8,9,10,8,9,10,8,9,10,8,9,10,11,12,0,0,0,0,0,0,0,0,0,0,0,0,13,14,11,12,13,14,11,12,12,11,12,11,12,11,12,11,12,11,12,14,11,12,11,12,11,13,14,11,12,11,12,13,14,11,12,13,11,11,12,11,12,13,12,12,12,12,11,12,12,12,11,12,13,14,11,12,13,14,11,12,12,13,14,11,12,15,15,15,15,15,0,0,0,0,16,0,15,0,15,15,16,16,16,15,0,2,15,17,18,2,15,16,19,17,18,2,15,16,19,2,2,2,15,16,19,2,15,16,19,2,2,2,2,19,2,15,16,19,2,2,15,16,19,19,17,18,2,15,16,19,19,19,17,2,2,2,2,2,2,17,18,2,15,16,19,17,18,17,18,19,19,2,15,19,17,2,17,17,18,17,19,2,2,17,18,17,18,2,15,16,19,19,2,2,17,18,2,15,16,19,17,18,2,15,16,19,17,18,2,15,16,19,2,2,20,21,22,21,20,23,20,22,22,24,0,24,24,0,0,24,24,0,1,1,25,24,1,25,24,1,1,1,1,1,1,1,24,1,0,24,24,1,25,24,24,1,1,1,25,25,24,1,25,1,1,1,1,1,25,1,25,1,1,1,1,1,1,1,1,24,25,24,1,25,24,1,25,24,1,25,1,1,26,26,26,26,0,26,26,26,0,0,27,28,27,26,28,27,26,26,26,26,27,26,26,28,27,26,26,26,26,28,27,26,28,27,26,26,28,27,26,28,27,26,28,27,26,29,30,31,30,29,32,29,31,31],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["attribute",3]],[[]],[[]],[[]],[[],["attribute",3]],[[],["ownedattribute",3]],[[]],[[]],[[["attribute",3]],["bool",15]],[[["ownedattribute",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["attribute",3]],["bool",15]],[[["ownedattribute",3]],["bool",15]],[[["name",3],["str",15]],["attribute",3]],[[["string",3],["ownedname",3],["into",8,["string"]]],["ownedattribute",3]],[[]],[[],["ownedattribute",3]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[["u8",15]]],[[["u8",15]]],[[]],[[]],[[]],[[]],[[],["textposition",3]],[[],["xmlversion",4]],[[]],[[]],null,[[["textposition",3]],["bool",15]],[[["xmlversion",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["char",15]],["bool",15]],[[["char",15]],["bool",15]],[[["char",15]],["bool",15]],[[["str",15]],["bool",15]],[[["textposition",3]],["bool",15]],[[],["textposition",3]],[[]],[[],["textposition",3]],[[],["textposition",3]],null,[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["str",15]],[["str",15],["cow",4,["str"]]]],[[["str",15]],[["str",15],["cow",4,["str"]]]],null,null,null,[[]],[[]],[[]],[[],["name",3]],[[]],[[]],[[]],[[],["name",3]],[[],["ownedname",3]],[[]],[[]],[[["name",3]],["bool",15]],[[["ownedname",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["name",3]],[[["str",15]],["name",3]],[[]],[[]],[[["name",3]],["ownedname",3]],[[["str",15]],[["ownedname",3],["result",4,["ownedname"]]]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["name",3]],[[],["ownedname",3]],null,null,null,null,[[],[["str",15],["option",4,["str"]]]],[[["name",3]],["bool",15]],[[["ownedname",3]],["bool",15]],null,null,[[],[["str",15],["option",4,["str"]]]],[[],["str",15]],[[["str",15]],["name",3]],[[["option",4,["str"]],["str",15]],["name",3]],[[["option",4]],["ownedname",3]],[[],["reprdisplay",3]],[[],["ownedname",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["checkedtarget",3]],[[],["namespace",3]],[[],["namespacestack",3]],[[]],[[]],[[],["bool",15]],[[],["namespacestack",3]],[[],["namespace",3]],[[],["namespacestack",3]],[[["namespace",3]],["bool",15]],[[["namespacestack",3]],["bool",15]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],[["string",3],["option",4,["string"]]]],[[]],[[]],[[]],[[]],[[],[["option",4,["str"]],["str",15]]],[[],[["option",4,["str"]],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["namespacestackmappings",3]],[[["namespace",3]],["bool",15]],[[["namespacestack",3]],["bool",15]],[[],[["option",4,["urimapping"]],["urimapping",6]]],[[],["namespace",3]],[[],["namespace",3]],[[],["namespace",3]],[[],["namespacestack",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["namespace",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["option",4,["namespace"]],["namespace",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["string",3],["into",8,["string"]]],["parserconfig",3]],[[],[["xmlevent",4],["option",4,["xmlevent"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]],["parserconfig",3]],null,[[],["parserconfig",3]],[[],["xmlevent",4]],[[]],[[],["error",3]],[[]],[[]],[[]],[[]],[[["bool",15]],["parserconfig",3]],null,[[["read",8]],[["eventreader",3],["read",8]]],[[],["parserconfig",3]],[[],["str",15]],[[["parserconfig",3]],["bool",15]],[[["xmlevent",4]],["bool",15]],[[["errorkind",4]],["bool",15]],[[["error",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]]],[[["str",15]],["eventreader",3]],[[["bool",15]],["parserconfig",3]],null,[[["bool",15]],["parserconfig",3]],null,[[["bool",15]],["parserconfig",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["eventreader",3]],[[],["events",3]],[[]],[[],["errorkind",4]],[[],["str",15]],[[["parserconfig",3]],["bool",15]],[[["xmlevent",4]],["bool",15]],[[["error",3]],["bool",15]],[[],["eventreader",3]],[[],["parserconfig",3]],[[["parserconfig",3]],["eventreader",3]],[[],[["result",6,["xmlevent"]],["xmlevent",4]]],[[],[["option",4,["result"]],["result",6,["xmlevent"]]]],[[],["textposition",3]],[[],["textposition",3]],[[["bool",15]],["parserconfig",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["bool",15]],["parserconfig",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bool",15]],["parserconfig",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15]],["emitterconfig",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]],["emitterconfig",3]],null,[[],["emitterconfig",3]],[[]],[[["write",8]],[["write",8],["eventwriter",3]]],[[],["emitterconfig",3]],[[],["str",15]],[[["emitterconfig",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",3]],["emittererror",4]],[[]],[[]],[[["cow",4,["str"]],["into",8,["cow"]]],["emitterconfig",3]],null,[[]],[[]],[[]],[[]],[[]],[[["bool",15]],["emitterconfig",3]],null,[[["cow",4,["str"]],["into",8,["cow"]]],["emitterconfig",3]],null,[[["emitterconfig",3]],["bool",15]],[[],["eventwriter",3]],[[],["emitterconfig",3]],[[["emitterconfig",3]],["eventwriter",3]],[[["bool",15]],["emitterconfig",3]],null,[[["bool",15]],["emitterconfig",3]],null,null,[[["bool",15]],["emitterconfig",3]],null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6]],[[["bool",15]],["emitterconfig",3]],null,null,null,null,null,null,null,null,null,null,null,[[["str",15]],["startelementbuilder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["xmlevent",4]],[[["str",15]],["xmlevent",4]],[[["str",15]],["xmlevent",4]],[[],["startelementbuilder",3]],[[],["endelementbuilder",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",15]],["xmlevent",4]],[[["endelementbuilder",3]],["xmlevent",4]],[[["startelementbuilder",3]],["xmlevent",4]],[[]],[[]],[[]],[[],["endelementbuilder",3]],[[],["startelementbuilder",3]],[[["option",4,["str"]],["str",15]],["xmlevent",4]],[[],["startelementbuilder",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null],"p":[[3,"EmitterConfig"],[3,"ParserConfig"],[3,"Attribute"],[3,"OwnedAttribute"],[4,"XmlVersion"],[3,"TextPosition"],[8,"Position"],[3,"ReprDisplay"],[3,"Name"],[3,"OwnedName"],[3,"Namespace"],[3,"NamespaceStack"],[3,"NamespaceStackMappings"],[3,"CheckedTarget"],[4,"XmlEvent"],[4,"ErrorKind"],[3,"EventReader"],[3,"Events"],[3,"Error"],[13,"StartElement"],[13,"ProcessingInstruction"],[13,"StartDocument"],[13,"EndElement"],[4,"Error"],[3,"EventWriter"],[4,"XmlEvent"],[3,"StartElementBuilder"],[3,"EndElementBuilder"],[13,"StartElement"],[13,"ProcessingInstruction"],[13,"StartDocument"],[13,"EndElement"]]},\
"xmltree":{"doc":"A simple library for parsing an XML file into an …","t":[12,13,13,13,13,3,13,8,3,13,13,4,13,13,13,3,4,13,13,4,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,10,12,12,12,11,11,11,11,11,11,11,12,11,12,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11],"n":["0","CData","CannotParse","Comment","DocumentStartAlreadyEmitted","Element","Element","ElementPredicate","EmitterConfig","EndElementNameIsNotEqualToLastStartElementName","EndElementNameIsNotSpecified","Error","Io","LastElementNameNotAvailable","MalformedXml","Namespace","ParseError","ProcessingInstruction","Text","XMLNode","as_cdata","as_comment","as_element","as_mut_element","as_processing_instruction","as_text","attributes","autopad_comments","autopad_comments","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","cdata_to_characters","cdata_to_characters","children","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","contains","create_writer","default","description","description","empty","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_put","from","from","from","from","from","from","from","get","get_child","get_mut_child","get_text","indent_string","indent_string","into","into","into","into","into","into","is_empty","is_essentially_empty","keep_element_names_stack","keep_element_names_stack","line_separator","line_separator","match_element","name","namespace","namespaces","ne","ne","ne","ne","new","new","normalize_empty_elements","normalize_empty_elements","pad_self_closing","pad_self_closing","parse","parse_all","perform_escaping","perform_indent","perform_indent","prefix","put","take_child","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write","write_document_declaration","write_document_declaration","write_with_config"],"q":["xmltree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","This library is unable to process this XML. This can …","","Document declaration has already been written to the …","Represents an XML element.","","A predicate for matching elements.","Emitter configuration structure.","The name of the last opening element is not equal to the …","End element name is not specified when it is needed, for …","An error which may be returned by <code>XmlWriter</code> when writing …","An I/O error occured in the underlying <code>Write</code> instance.","The name of the last opening element is not available.","The XML is invalid","Namespace is a map from prefixes to namespace URIs.","Errors that can occur parsing XML","","","","","","","","","","The Element attributes","Sets the field to the provided value and returns updated …","Whether or not to automatically insert leading and …","","","","","","","","","","","","","","Sets the field to the provided value and returns updated …","Whether or not to emit CDATA events as plain characters. …","Children","","","","","","","","","Checks whether this namespace mapping contains the given …","Creates an XML writer with this configuration.","","","","Returns an empty namespace.","","","","","","","","","","","","","","Puts a mapping into this namespace forcefully.","","","","","","","","Queries the namespace for the given prefix.","Find a child element with the given name and return a …","Find a child element with the given name and return a …","Returns the inner text/cdata of this element, if any.","Sets the field to the provided value and returns updated …","A string which will be used for a single level of …","","","","","","","Checks whether this namespace is empty.","Checks whether this namespace is essentially empty, that …","Sets the field to the provided value and returns updated …","Whether or not to keep element names to support <code>EndElement</code>…","Sets the field to the provided value and returns updated …","Line separator used to separate lines in formatted …","","The name of the Element.  Does not include any namespace …","This elements namespace, if any","The full list of namespaces, if any","","","","","Create a new empty element with given name","Creates an emitter configuration with default values.","Sets the field to the provided value and returns updated …","Whether or not to convert elements with empty content to …","Sets the field to the provided value and returns updated …","Whether or not to automatically insert spaces before the …","Parses some data into an Element","Parses some data into a list of <code>XMLNode</code>s","Whether or not characters in output events will be …","Sets the field to the provided value and returns updated …","Whether or not the emitted document should be indented. …","This elements prefix, if any","Puts a mapping into this namespace.","Find a child element with the given name, remove and …","","","","","","","","","","","","","","","","","","","","","","","","","Writes out this element as the root element in an new XML …","Sets the field to the provided value and returns updated …","Whether or not to write XML document declaration at the …","Writes out this element as the root element in a new XML …"],"i":[1,2,3,2,4,0,2,0,0,4,4,0,4,4,3,0,0,2,2,0,2,2,2,2,2,2,5,6,6,2,5,3,1,4,6,2,5,3,1,4,6,3,6,6,5,2,5,1,6,2,5,1,6,1,6,6,3,4,1,2,5,1,6,1,2,5,3,3,1,4,4,6,1,2,5,3,1,4,4,6,1,5,5,5,6,6,2,5,3,1,4,6,1,1,6,6,6,6,7,5,5,5,2,5,1,6,5,6,6,6,6,6,5,5,6,6,6,5,1,5,2,5,1,6,3,4,2,5,3,1,4,6,2,5,3,1,4,6,2,5,3,1,4,6,5,6,6,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["str",15],["option",4,["str"]]]],[[],[["str",15],["option",4,["str"]]]],[[],[["option",4,["element"]],["element",3]]],[[],[["option",4,["element"]],["element",3]]],[[],["option",4]],[[],[["str",15],["option",4,["str"]]]],null,[[["bool",15]],["emitterconfig",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",8],["option",4,["error"]]]],[[["bool",15]],["emitterconfig",3]],null,null,[[],["xmlnode",4]],[[],["element",3]],[[],["namespace",3]],[[],["emitterconfig",3]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["eventwriter",3]],[[],["emitterconfig",3]],[[],["str",15]],[[],["str",15]],[[],["namespace",3]],[[["xmlnode",4]],["bool",15]],[[["element",3]],["bool",15]],[[["namespace",3]],["bool",15]],[[["emitterconfig",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[],[["option",4,["string"]],["string",3]]],[[]],[[]],[[]],[[]],[[["error",3]],["emittererror",4]],[[]],[[]],[[],[["str",15],["option",4,["str"]]]],[[["elementpredicate",8]],[["option",4,["element"]],["element",3]]],[[["elementpredicate",8]],[["option",4,["element"]],["element",3]]],[[],[["option",4,["cow"]],["cow",4,["str"]]]],[[],["emitterconfig",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["bool",15]],["emitterconfig",3]],null,[[],["emitterconfig",3]],null,[[["element",3]],["bool",15]],null,null,null,[[["xmlnode",4]],["bool",15]],[[["element",3]],["bool",15]],[[["namespace",3]],["bool",15]],[[["emitterconfig",3]],["bool",15]],[[["str",15]],["element",3]],[[],["emitterconfig",3]],[[["bool",15]],["emitterconfig",3]],null,[[["bool",15]],["emitterconfig",3]],null,[[["read",8]],[["element",3],["result",4,["element","parseerror"]],["parseerror",4]]],[[["read",8]],[["vec",3,["xmlnode"]],["parseerror",4],["result",4,["vec","parseerror"]]]],null,[[["bool",15]],["emitterconfig",3]],null,null,[[],["bool",15]],[[["elementpredicate",8]],[["option",4,["element"]],["element",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["write",8]],[["result",4,["error"]],["error",4]]],[[["bool",15]],["emitterconfig",3]],null,[[["write",8],["emitterconfig",3]],[["result",4,["error"]],["error",4]]]],"p":[[3,"Namespace"],[4,"XMLNode"],[4,"ParseError"],[4,"Error"],[3,"Element"],[3,"EmitterConfig"],[8,"ElementPredicate"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};